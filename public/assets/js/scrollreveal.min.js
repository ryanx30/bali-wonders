var ScrollReveal = (function () {
  var defaults = {
    delay: 0,
    distance: "0",
    duration: 600,
    easing: "cubic-bezier(0.5, 0, 0, 1)",
    interval: 0,
    opacity: 0,
    origin: "bottom",
    rotate: { x: 0, y: 0, z: 0 },
    scale: 1,
    cleanup: false,
    container: document.documentElement,
    desktop: true,
    mobile: true,
    reset: false,
    useDelay: "always",
    viewFactor: 0,
    viewOffset: { top: 0, right: 0, bottom: 0, left: 0 },
    afterReset: function () {},
    afterReveal: function () {},
    beforeReset: function () {},
    beforeReveal: function () {},
  };

  function isElement(node) {
    return typeof window.Node === "object"
      ? node instanceof window.Node
      : node !== null &&
          typeof node === "object" &&
          typeof node.nodeType === "number" &&
          typeof node.nodeName === "string";
  }

  function getElements(target, container) {
    if (container === void 0) container = document;
    if (Array.isArray(target)) return target.filter(isElement);
    if (isElement(target)) return [target];
    if (typeof target === "string") {
      try {
        var nodeList = container.querySelectorAll(target);
        return Array.prototype.slice.call(nodeList);
      } catch (e) {
        return [];
      }
    }
    return [];
  }

  function isObject(obj) {
    return (
      obj !== null &&
      typeof obj === "object" &&
      (obj.constructor === Object ||
        Object.prototype.toString.call(obj) === "[object Object]")
    );
  }

  function forEach(collection, callback) {
    if (isObject(collection)) {
      Object.keys(collection).forEach(function (key) {
        callback(collection[key], key, collection);
      });
    } else if (Array.isArray(collection)) {
      collection.forEach(function (item, index) {
        callback(item, index, collection);
      });
    } else {
      throw new TypeError("Expected either an array or object literal.");
    }
  }

  function sync() {
    var store = this.store;
    var elements = { active: [], stale: [] };
    var containers = { active: [], stale: [] };
    var sequences = { active: [], stale: [] };

    try {
      forEach(getElements("[data-sr-id]"), function (element) {
        var id = parseInt(element.getAttribute("data-sr-id"));
        elements.active.push(id);
      });
    } catch (e) {
      throw e;
    }

    forEach(store.elements, function (element) {
      if (elements.active.indexOf(element.id) === -1) elements.stale.push(element.id);
    });

    elements.stale.forEach(function (id) {
      delete store.elements[id];
    });

    forEach(store.elements, function (element) {
      if (containers.active.indexOf(element.containerId) === -1)
        containers.active.push(element.containerId);
      if (element.sequence && sequences.active.indexOf(element.sequence.id) === -1)
        sequences.active.push(element.sequence.id);
    });

    forEach(store.containers, function (container) {
      if (containers.active.indexOf(container.id) === -1)
        containers.stale.push(container.id);
    });

    containers.stale.forEach(function (id) {
      var containerNode = store.containers[id].node;
      containerNode.removeEventListener("scroll", this.delegate);
      containerNode.removeEventListener("resize", this.delegate);
      delete store.containers[id];
    });

    forEach(store.sequences, function (sequence) {
      if (sequences.active.indexOf(sequence.id) === -1)
        sequences.stale.push(sequence.id);
    });

    sequences.stale.forEach(function (id) {
      delete store.sequences[id];
    });
  }

  function createMatrix() {
    var matrix = [];
    for (var i = 0; i < 16; i++) {
      matrix.push(i % 5 === 0 ? 1 : 0);
    }
    return matrix;
  }

  function toMatrix(array) {
    if (array.constructor !== Array) throw new TypeError("Expected array.");
    if (array.length === 16) return array;
    if (array.length !== 6)
      throw new RangeError("Expected array with either 6 or 16 values.");
    var matrix = createMatrix();
    matrix[0] = array[0];
    matrix[1] = array[1];
    matrix[4] = array[2];
    matrix[5] = array[3];
    matrix[12] = array[4];
    matrix[13] = array[5];
    return matrix;
  }

  function multiplyMatrix(a, b) {
    var matrixA = toMatrix(a);
    var matrixB = toMatrix(b);
    var result = [];
    for (var i = 0; i < 4; i++) {
      var row = [matrixA[i], matrixA[i + 4], matrixA[i + 8], matrixA[i + 12]];
      for (var j = 0; j < 4; j++) {
        var col = [matrixB[j * 4], matrixB[j * 4 + 1], matrixB[j * 4 + 2], matrixB[j * 4 + 3]];
        var sum = row[0] * col[0] + row[1] * col[1] + row[2] * col[2] + row[3] * col[3];
        result[i + j * 4] = sum;
      }
    }
    return result;
  }

  function scaleMatrix(sx, sy) {
    var matrix = createMatrix();
    matrix[0] = sx;
    matrix[5] = typeof sy === "number" ? sy : sx;
    return matrix;
  }

  var getStyleProperty = (function () {
    var cache = {};
    var style = document.documentElement.style;

    function get(property, styleElement) {
      if (styleElement === void 0) styleElement = style;
      if (property && typeof property === "string") {
        if (cache[property]) return cache[property];
        if (typeof styleElement[property] === "string") return (cache[property] = property);
        if (typeof styleElement["-webkit-" + property] === "string")
          return (cache[property] = "-webkit-" + property);
        throw new RangeError('Unable to find "' + property + '" style property.');
      }
      throw new TypeError("Expected a string.");
    }

    get.clearCache = function () {
      cache = {};
    };

    return get;
  })();

  function computeStyles(element) {
    var computedStyle = window.getComputedStyle(element.node);
    var config = element.config;
    var inline = {
      computed: (element.node.getAttribute("style") || "").match(/[\w-]+\s*:\s*[^;]+\s*/gi) || [],
      generated: [],
    };
    inline.computed = inline.computed
      .map(function (style) {
        return style.trim();
      })
      .join("; ") + ";";
    inline.generated = inline.computed
      .concat(["visibility: visible"])
      .map(function (style) {
        return style.trim();
      })
      .join("; ") + ";";

    var opacity = {
      computed: computedStyle.opacity !== "1" ? "opacity: " + computedStyle.opacity + ";" : "",
      generated: config.opacity !== null && computedStyle.opacity !== String(config.opacity)
        ? "opacity: " + config.opacity + ";"
        : "",
    };

    var transform = {
      property: getStyleProperty("transform"),
      computed: {
        raw: computedStyle[getStyleProperty("transform")],
        matrix: (function (value) {
          if (typeof value === "string") {
            var match = value.match(/matrix(3d)?\(([^)]+)\)/);
            if (match) return toMatrix(match[2].split(", ").map(parseFloat));
          }
          return createMatrix();
        })(computedStyle[getStyleProperty("transform")]),
      },
    };

    var transforms = [];
    if (config.distance) {
      var distance = config.distance;
      if (["top", "bottom"].indexOf(config.origin) !== -1) distance.y = config.distance;
      if (["left", "right"].indexOf(config.origin) !== -1) distance.x = config.distance;
      transforms.push(
        multiplyMatrix(scaleMatrix(1, 1), scaleMatrix(distance.x || 0, distance.y || 0))
      );
    }

    if (config.scale) {
      transforms.push(scaleMatrix(config.scale, config.scale));
    }

    if (config.rotate) {
      if (config.rotate.x) {
        transforms.push(multiplyMatrix(toMatrix([1, 0, 0, 0, 0, Math.cos(config.rotate.x), Math.sin(config.rotate.x), 0, 0, -Math.sin(config.rotate.x), Math.cos(config.rotate.x), 0, 0, 0, 0, 1]), createMatrix()));
      }
      if (config.rotate.y) {
        transforms.push(multiplyMatrix(toMatrix([Math.cos(config.rotate.y), 0, -Math.sin(config.rotate.y), 0, 0, 1, 0, 0, Math.sin(config.rotate.y), 0, Math.cos(config.rotate.y), 0, 0, 0, 0, 1]), createMatrix()));
      }
      if (config.rotate.z) {
        transforms.push(multiplyMatrix(toMatrix([Math.cos(config.rotate.z), Math.sin(config.rotate.z), 0, 0, -Math.sin(config.rotate.z), Math.cos(config.rotate.z), 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]), createMatrix()));
      }
    }

    return {
      inline: inline,
      opacity: opacity,
      transform: {
        property: transform.property,
        computed: transform.computed,
        generated: transforms.length ? transforms.reduce(multiplyMatrix) : transform.computed.matrix,
      },
    };
  }

  var ScrollReveal = (function () {
    function ScrollReveal(options) {
      if (options === void 0) options = {};
      var config = (this.config = { ...defaults, ...options });
      this.store = {
        containers: {},
        elements: {},
        sequences: {},
      };
      this.delegate = null;

      try {
        if (config.container instanceof HTMLElement) {
          if (!config.container.hasAttribute("data-sr-container")) {
            var containerId = parseInt(config.container.getAttribute("data-sr-container")) || (Date.now() + Math.random()).toFixed(0);
            config.container.setAttribute("data-sr-container", containerId);
            this.store.containers[containerId] = {
              id: containerId,
              node: config.container,
            };
          }
        }
      } catch (e) {
        throw e;
      }
    }

    ScrollReveal.prototype.reveal = function (target, options, interval) {
      var _this = this;
      if (options === void 0) options = {};
      if (interval === void 0) interval = 0;
      var container = this.config.container;

      var sequence = {
        id: (Date.now() + Math.random()).toFixed(0),
        interval: interval,
        items: [],
      };

      var elements = getElements(target, container);

      elements.forEach(function (element) {
        var elementId = parseInt(element.getAttribute("data-sr-id")) || (Date.now() + Math.random()).toFixed(0);
        element.setAttribute("data-sr-id", elementId);
        var containerId = parseInt(container.getAttribute("data-sr-container"));
        var existing = _this.store.elements[elementId];

        if (existing) {
          existing.sequence = sequence;
          sequence.items.push(existing);
        } else {
          var styles = computeStyles({
            node: element,
            config: { ..._this.config, ...options },
            containerId: containerId,
            sequence: sequence,
          });

          _this.store.elements[elementId] = {
            id: elementId,
            node: element,
            styles: styles,
            sequence: sequence,
          };

          sequence.items.push(_this.store.elements[elementId]);
        }
      });

      if (this.delegate === null) {
        this.delegate = function () {
          _this.store.sequences.forEach(function (sequence) {
            if (sequence.active) return;
            var container = _this.store.containers[sequence.containerId];
            if (container) {
              var rect = container.node.getBoundingClientRect();
              if (rect.top <= window.innerHeight && rect.bottom >= 0) {
                sequence.active = true;
                sequence.items.forEach(function (item, index) {
                  setTimeout(function () {
                    item.node.style.visibility = "visible";
                    item.node.style.opacity = item.styles.opacity.generated;
                    item.node.style.transform = item.styles.transform.generated;
                  }, sequence.interval * index);
                });
              }
            }
          });
        };

        window.addEventListener("scroll", this.delegate);
        window.addEventListener("resize", this.delegate);
      }
    };

    ScrollReveal.prototype.sync = sync;

    return ScrollReveal;
  })();

  return ScrollReveal;
})();

ScrollReveal().reveal('.reveal');
